Vmax = 1
F = 1
K = 0.1
ci <- seq(0,3,length = 1000)
V <- seq(0,1,length = 1000)
m = outer(ci, V, function(ci, V) F*(ci - ci*exp((V - Vmax)/(F*K))) - V)
n = outer(ci, V, function(ci, V) F*ci - V)
z = outer(ci, V, function(ci, V) Vmax * ci/K - V)
contour(ci, V, m, levels = 0)
contour(ci, V, n, levels = 0, add = TRUE)
counter(ci, V, z, levels = 0, add = TRUE)
Vmax = 1
F = 1
K = 0.1
ci <- seq(0,3,length = 1000)
V <- seq(0,1,length = 1000)
m = outer(ci, V, function(ci, V) F*(ci - ci*exp((V - Vmax)/(F*K))) - V)
n = outer(ci, V, function(ci, V) F*ci - V)
z = outer(ci, V, function(ci, V) (Vmax * ci)/K - V)
contour(ci, V, m, levels = 0)
contour(ci, V, n, levels = 0, add = TRUE)
counter(ci, V, z, levels = 0, add = TRUE)
Vmax = 1
F = 1
K = 0.1
ci <- seq(0,3,length = 1000)
V <- seq(0,1,length = 1000)
m = outer(ci, V, function(ci, V) F*(ci - ci*exp((V - Vmax)/(F*K))) - V)
n = outer(ci, V, function(ci, V) F*ci - V)
z = outer(ci, V, function(ci, V) (Vmax * ci)/K - V)
contour(ci, V, m, levels = 0)
contour(ci, V, n, levels = 0, add = TRUE)
contour(ci, V, z, levels = 0, add = TRUE)
abline()
Vmax = 1
F = 1
K = 0.1
ci <- seq(0,3,length = 1000)
V <- seq(0,1,length = 1000)
m = outer(ci, V, function(ci, V) F*(ci - ci*exp((V - Vmax)/(F*K))) - V)
n = outer(ci, V, function(ci, V) F*ci - V)
z = outer(ci, V, function(ci, V) (Vmax * ci)/K - V)
contour(ci, V, m, levels = 0)
contour(ci, V, n, levels = 0, add = TRUE)
contour(ci, V, z, levels = 0, add = TRUE)
abline(h = 0.4)
Vmax = 1
F = 1
K = 0.1
ci <- seq(0,3,length = 1000)
V <- seq(0,1,length = 1000)
m = outer(ci, V, function(ci, V) F*(ci - ci*exp((V - Vmax)/(F*K))) - V)
n = outer(ci, V, function(ci, V) F*ci - V)
z = outer(ci, V, function(ci, V) (Vmax * ci)/K - V)
contour(ci, V, m, levels = 0)
contour(ci, V, n, levels = 0, add = TRUE)
contour(ci, V, z, levels = 0, add = TRUE)
abline(v = 0.4)
Vmax = 1
F = 1
K = 0.1
ci <- seq(0,3,length = 1000)
V <- seq(0,1,length = 1000)
m = outer(ci, V, function(ci, V) F*(ci - ci*exp((V - Vmax)/(F*K))) - V)
n = outer(ci, V, function(ci, V) F*ci - V)
z = outer(ci, V, function(ci, V) (Vmax * ci)/K - V)
contour(ci, V, m, levels = 0)
contour(ci, V, n, levels = 0, add = TRUE)
contour(ci, V, z, levels = 0, add = TRUE)
abline(v = 0.41)
Vmax = 1
F = 1
K = 0.1
ci <- seq(0,3,length = 1000)
V <- seq(0,1,length = 1000)
m = outer(ci, V, function(ci, V) F*(ci - ci*exp((V - Vmax)/(F*K))) - V)
n = outer(ci, V, function(ci, V) F*ci - V)
z = outer(ci, V, function(ci, V) (Vmax * ci)/K - V)
contour(ci, V, m, levels = 0)
contour(ci, V, n, levels = 0, add = TRUE)
contour(ci, V, z, levels = 0, add = TRUE)
abline(v = 0.42)
Vmax = 1
F = 1
K = 0.1
ci <- seq(0,3,length = 1000)
V <- seq(0,1,length = 1000)
m = outer(ci, V, function(ci, V) F*(ci - ci*exp((V - Vmax)/(F*K))) - V)
n = outer(ci, V, function(ci, V) F*ci - V)
z = outer(ci, V, function(ci, V) (Vmax * ci)/K - V)
contour(ci, V, m, levels = 0)
contour(ci, V, n, levels = 0, add = TRUE)
contour(ci, V, z, levels = 0, add = TRUE)
abline(m = n)
Vmax = 1
F = 1
K = 0.1
ci <- seq(0,3,length = 1000)
V <- seq(0,1,length = 1000)
m = outer(ci, V, function(ci, V) F*(ci - ci*exp((V - Vmax)/(F*K))) - V)
n = outer(ci, V, function(ci, V) F*ci - V)
z = outer(ci, V, function(ci, V) (Vmax * ci)/K - V)
contour(ci, V, m, levels = 0)
contour(ci, V, n, levels = 0, add = TRUE)
contour(ci, V, z, levels = 0, add = TRUE)
abline( v = m = n)
Vmax = 1
F = 1
K = 0.1
ci <- seq(0,3,length = 1000)
V <- seq(0,1,length = 1000)
m = outer(ci, V, function(ci, V) F*(ci - ci*exp((V - Vmax)/(F*K))) - V)
n = outer(ci, V, function(ci, V) F*ci - V)
z = outer(ci, V, function(ci, V) (Vmax*ci)/(ci + K))
contour(ci, V, m, levels = 0)
contour(ci, V, n, levels = 0, add = TRUE)
contour(ci, V, z, levels = 0, add = TRUE)
abline( v = m = n)
Vmax = 1
F = 1
K = 0.1
ci <- seq(0,3,length = 1000)
V <- seq(0,1,length = 1000)
m = outer(ci, V, function(ci, V) F*(ci - ci*exp((V - Vmax)/(F*K))) - V)
n = outer(ci, V, function(ci, V) F*ci - V)
z = outer(ci, V, function(ci, V) (Vmax*ci)/(ci + K))
contour(ci, V, m, levels = 0)
contour(ci, V, n, levels = 0, add = TRUE)
contour(ci, V, z, levels = 0, add = TRUE)
Vmax = 1
F = 1
K = 0.1
ci <- seq(0,3,length = 1000)
V <- seq(0,1,length = 1000)
m = outer(ci, V, function(ci, V) F*(ci - ci*exp((V - Vmax)/(F*K))) - V)
n = outer(ci, V, function(ci, V) F*ci - V)
z = outer(ci, V, function(ci, V) Vmax*ci/(ci + K))
contour(ci, V, m, levels = 0)
contour(ci, V, n, levels = 0, add = TRUE)
contour(ci, V, z, levels = 0, add = TRUE)
Vmax = 1
F = 1
K = 0.1
ci <- seq(0,3,length = 1000)
V <- seq(0,1,length = 1000)
m = outer(ci, V, function(ci, V) F*(ci - ci*exp((V - Vmax)/(F*K))) - V)
n = outer(ci, V, function(ci, V) F*ci - V)
z = outer(ci, V, function(ci, V) Vmax*ci/(ci + K) - V)
contour(ci, V, m, levels = 0)
contour(ci, V, n, levels = 0, add = TRUE)
contour(ci, V, z, levels = 0, add = TRUE)
Vmax = 1
F = 1
K = 0.1
ci <- seq(0,3,length = 1000)
V <- seq(0,1,length = 1000)
m = outer(ci, V, function(ci, V) F*(ci - ci*exp((V - Vmax)/(F*K))) - V)
n = outer(ci, V, function(ci, V) F*ci - V)
z = outer(ci, V, function(ci, V) Vmax*ci/(ci + K) - V)
contour(ci, V, m, levels = 0)
contour(ci, V, n, levels = 0, add = TRUE)
contour(ci, V, z, levels = 0, add = TRUE)
abline(v = 0.42)
Vmax = 1
F = 1
K = 0.1
ci <- seq(0,3,length = 1000)
V <- seq(0,1,length = 1000)
m = outer(ci, V, function(ci, V) F*(ci - ci*exp((V - Vmax)/(F*K))) - V)
n = outer(ci, V, function(ci, V) F*ci - V)
z = outer(ci, V, function(ci, V) Vmax*ci/(ci + K) - V)
contour(ci, V, m, levels = 0)
contour(ci, V, n, levels = 0, add = TRUE)
contour(ci, V, z, levels = 0, add = TRUE)
abline(v = 0.42, col = "gray60")
Vmax = 1
F = 1
K = 0.1
ci <- seq(0,3,length = 1000)
V <- seq(0,1,length = 1000)
m = outer(ci, V, function(ci, V) F*(ci - ci*exp((V - Vmax)/(F*K))) - V)
n = outer(ci, V, function(ci, V) F*ci - V)
z = outer(ci, V, function(ci, V) Vmax*ci/(ci + K) - V)
contour(ci, V, m, levels = 0)
contour(ci, V, n, levels = 0, add = TRUE)
contour(ci, V, z, levels = 0, add = TRUE)
abline(v = 0.42, col = "red")
Vmax = 1
F = 1
K = 0.1
ci <- seq(0,3,length = 1000)
V <- seq(0,1,length = 1000)
m = outer(ci, V, function(ci, V) F*(ci - ci*exp((V - Vmax)/(F*K))) - V)
n = outer(ci, V, function(ci, V) F*ci - V)
z = outer(ci, V, function(ci, V) Vmax*ci/(ci + K) - V)
contour(ci, V, m, levels = 0, col = "green")
contour(ci, V, n, levels = 0, add = TRUE)
contour(ci, V, z, levels = 0, add = TRUE)
abline(v = 0.42, col = "red")
Vmax = 1
F = 1
K = 0.1
ci <- seq(0,3,length = 1000)
V <- seq(0,1,length = 1000)
m = outer(ci, V, function(ci, V) F*(ci - ci*exp((V - Vmax)/(F*K))) - V)
n = outer(ci, V, function(ci, V) F*ci - V)
z = outer(ci, V, function(ci, V) Vmax*ci/(ci + K) - V)
contour(ci, V, m, levels = 0, col = "blue")
contour(ci, V, n, levels = 0, add = TRUE)
contour(ci, V, z, levels = 0, add = TRUE)
abline(v = 0.42, col = "red")
Vmax = 1
F = 1
K = 0.1
ci <- seq(0,3,length = 1000)
V <- seq(0,1,length = 1000)
m = outer(ci, V, function(ci, V) F*(ci - ci*exp((V - Vmax)/(F*K))) - V)
n = outer(ci, V, function(ci, V) F*ci - V)
z = outer(ci, V, function(ci, V) Vmax*ci/(ci + K) - V)
contour(ci, V, m, levels = 0, col = "blue")
contour(ci, V, n, levels = 0, add = TRUE, col = "purple")
contour(ci, V, z, levels = 0, add = TRUE)
abline(v = 0.42, col = "red")
Vmax = 1
F = 1
K = 0.1
ci <- seq(0,3,length = 1000)
V <- seq(0,1,length = 1000)
m = outer(ci, V, function(ci, V) F*(ci - ci*exp((V - Vmax)/(F*K))) - V)
n = outer(ci, V, function(ci, V) F*ci - V)
z = outer(ci, V, function(ci, V) Vmax*ci/(ci + K) - V)
contour(ci, V, m, levels = 0, col = "blue")
contour(ci, V, n, levels = 0, add = TRUE, col = "purple")
contour(ci, V, z, levels = 0, add = TRUE, col = "green")
abline(v = 0.42, col = "red")
Vmax = 1
F = 1
K = 0.1
ci <- seq(0,3,length = 1000)
V <- seq(0,1,length = 1000)
m = outer(ci, V, function(ci, V) F*(ci - ci*exp((V - Vmax)/(F*K))) - V)
n = outer(ci, V, function(ci, V) F*ci - V)
z = outer(ci, V, function(ci, V) Vmax*ci/(ci + K) - V)
contour(ci, V, m, levels = 0, col = "blue", , xlab='x', ylab='y')
contour(ci, V, n, levels = 0, add = TRUE, col = "purple")
contour(ci, V, z, levels = 0, add = TRUE, col = "green")
abline(v = 0.42, col = "red")
Vmax = 1
F = 1
K = 0.1
ci <- seq(0,3,length = 1000)
V <- seq(0,1,length = 1000)
m = outer(ci, V, function(ci, V) F*(ci - ci*exp((V - Vmax)/(F*K))) - V)
n = outer(ci, V, function(ci, V) F*ci - V)
z = outer(ci, V, function(ci, V) Vmax*ci/(ci + K) - V)
contour(ci, V, m, levels = 0, col = "blue", , xlab='ci', ylab='V')
contour(ci, V, n, levels = 0, add = TRUE, col = "purple")
contour(ci, V, z, levels = 0, add = TRUE, col = "green")
abline(v = 0.42, col = "red")
Vmax = 1
F = 1
K = 0.1
ci <- seq(0,3,length = 1000)
V <- seq(0,1,length = 1000)
m = outer(ci, V, function(ci, V) F*(ci - ci*exp((V - Vmax)/(F*K))) - V)
n = outer(ci, V, function(ci, V) F*ci - V)
z = outer(ci, V, function(ci, V) Vmax*ci/(ci + K) - V)
contour(ci, V, m, levels = 0, col = "blue", , xlab='ci (mmol/L)', ylab='V (mmol/min)')
contour(ci, V, n, levels = 0, add = TRUE, col = "purple")
contour(ci, V, z, levels = 0, add = TRUE, col = "green")
abline(v = 0.42, col = "red")
# First, set Vmax, F, K.
Vmax = 1
F = 1
K = 0.1
#
ci <- seq(0,3,length = 1000)
V <- seq(0,1,length = 1000)
m = outer(ci, V, function(ci, V) F*(ci - ci*exp((V - Vmax)/(F*K))) - V)
n = outer(ci, V, function(ci, V) F*ci - V)
z = outer(ci, V, function(ci, V) Vmax*ci/(ci + K) - V)
contour(ci, V, m, levels = 0, col = "blue", , xlab='ci (mmol/l)', ylab='V (mmol/min)', theme = "cas")
contour(ci, V, n, levels = 0, add = TRUE, col = "purple")
contour(ci, V, z, levels = 0, add = TRUE, col = "green")
abline(v = 0.42, col = "red")
# First, set Vmax, F, K.
Vmax = 1
F = 1
K = 0.1
#
ci <- seq(0,3,length = 1000)
V <- seq(0,1,length = 1000)
m = outer(ci, V, function(ci, V) F*(ci - ci*exp((V - Vmax)/(F*K))) - V)
n = outer(ci, V, function(ci, V) F*ci - V)
z = outer(ci, V, function(ci, V) Vmax*ci/(ci + K) - V)
contour(ci, V, m, levels = 0, col = "blue", , xlab='ci (mmol/l)', ylab='V (mmol/min)', title = "cas")
contour(ci, V, n, levels = 0, add = TRUE, col = "purple")
contour(ci, V, z, levels = 0, add = TRUE, col = "green")
abline(v = 0.42, col = "red")
# First, set Vmax, F, K.
Vmax = 1
F = 1
K = 0.1
#
ci <- seq(0,3,length = 1000)
V <- seq(0,1,length = 1000)
m = outer(ci, V, function(ci, V) F*(ci - ci*exp((V - Vmax)/(F*K))) - V)
n = outer(ci, V, function(ci, V) F*ci - V)
z = outer(ci, V, function(ci, V) Vmax*ci/(ci + K) - V)
contour(ci, V, m, levels = 0, col = "blue", , xlab='ci (mmol/l)', ylab='V (mmol/min)', labs(title = "cas"))
contour(ci, V, n, levels = 0, add = TRUE, col = "purple")
contour(ci, V, z, levels = 0, add = TRUE, col = "green")
abline(v = 0.42, col = "red")
# First, set Vmax, F, K.
Vmax = 1
F = 1
K = 0.1
#
ci <- seq(0,3,length = 1000)
V <- seq(0,1,length = 1000)
m = outer(ci, V, function(ci, V) F*(ci - ci*exp((V - Vmax)/(F*K))) - V)
n = outer(ci, V, function(ci, V) F*ci - V)
z = outer(ci, V, function(ci, V) Vmax*ci/(ci + K) - V)
contour(ci, V, m, levels = 0, col = "blue", , xlab='ci (mmol/l)', ylab='V (mmol/min)') + labs(title = "cas")
# First, set Vmax, F, K.
Vmax = 1
F = 1
K = 0.1
#
ci <- seq(0,3,length = 1000)
V <- seq(0,1,length = 1000)
m = outer(ci, V, function(ci, V) F*(ci - ci*exp((V - Vmax)/(F*K))) - V)
n = outer(ci, V, function(ci, V) F*ci - V)
z = outer(ci, V, function(ci, V) Vmax*ci/(ci + K) - V)
contour(ci, V, m, levels = 0, col = "blue", , xlab='ci (mmol/l)', ylab='V (mmol/min)')
contour(ci, V, n, levels = 0, add = TRUE, col = "purple")
contour(ci, V, z, levels = 0, add = TRUE, col = "green")
abline(v = 0.42, col = "red")
# First, set Vmax, F, K.
Vmax = 1
F = 1
K = 0.1
#
ci <- seq(0,3,length = 1000)
V <- seq(0,1,length = 1000)
m = outer(ci, V, function(ci, V) F*(ci - ci*exp((V - Vmax)/(F*K))) - V)
n = outer(ci, V, function(ci, V) F*ci - V)
z = outer(ci, V, function(ci, V) Vmax*ci/(ci + K) - V)
contour(ci, V, m, levels = 0, col = "blue", , xlab='ci (mmol/l)', ylab='V (mmol/min)', main = "adc")
contour(ci, V, n, levels = 0, add = TRUE, col = "purple")
contour(ci, V, z, levels = 0, add = TRUE, col = "green")
abline(v = 0.42, col = "red")
# First, set Vmax, F, K.
Vmax = 1
F = 1
K = 0.1
#
ci <- seq(0,3,length = 1000)
V <- seq(0,1,length = 1000)
m = outer(ci, V, function(ci, V) F*(ci - ci*exp((V - Vmax)/(F*K))) - V)
n = outer(ci, V, function(ci, V) F*ci - V)
z = outer(ci, V, function(ci, V) Vmax*ci/(ci + K) - V)
contour(ci, V, m, levels = 0, col = "blue", , xlab='ci (mmol/l)', ylab='V (mmol/min)', main = "adc", lty = 2)
contour(ci, V, n, levels = 0, add = TRUE, col = "purple")
contour(ci, V, z, levels = 0, add = TRUE, col = "green")
abline(v = 0.42, col = "red")
# First, set Vmax, F, K.
Vmax = 1
F = 1
K = 0.1
#
ci <- seq(0,3,length = 1000)
V <- seq(0,1,length = 1000)
m = outer(ci, V, function(ci, V) F*(ci - ci*exp((V - Vmax)/(F*K))) - V)
n = outer(ci, V, function(ci, V) F*ci - V)
z = outer(ci, V, function(ci, V) Vmax*ci/(ci + K) - V)
contour(ci, V, m, levels = 0, col = "blue", , xlab='ci (mmol/l)', ylab='V (mmol/min)', main = "Relationship between total elimination rate and input substrate concentration", lty = 2)
contour(ci, V, n, levels = 0, add = TRUE, col = "purple")
contour(ci, V, z, levels = 0, add = TRUE, col = "green", lty = 2)
abline(v = 0.42, col = "red")
# First, set Vmax, F, K.
Vmax = 1
F = 1
K = 0.1
#
ci <- seq(0,3,length = 1000)
V <- seq(0,1,length = 1000)
m = outer(ci, V, function(ci, V) F*(ci - ci*exp((V - Vmax)/(F*K))) - V)
n = outer(ci, V, function(ci, V) F*ci - V)
z = outer(ci, V, function(ci, V) Vmax*ci/(ci + K) - V)
contour(ci, V, m, levels = 0, col = "blue", , xlab='ci (mmol/l)', ylab='V (mmol/min)', main = "Relationship between total elimination rate and input substrate concentration", lty = 2)
contour(ci, V, n, levels = 0, add = TRUE, col = "purple")
contour(ci, V, z, levels = 0, add = TRUE, col = "green", lty = 2)
abline(v = 0.42, col = "red", lty = 2)
# First, set Vmax, F, K.
Vmax = 1
F = 1
K = 0.1
#
ci <- seq(0,3,length = 1000)
V <- seq(0,1,length = 1000)
m = outer(ci, V, function(ci, V) F*(ci - ci*exp((V - Vmax)/(F*K))) - V)
n = outer(ci, V, function(ci, V) F*ci - V)
z = outer(ci, V, function(ci, V) Vmax*ci/(ci + K) - V)
contour(ci, V, m, levels = 0, col = "blue", , xlab='ci (mmol/l)', ylab='V (mmol/min)', main = "Relationship between total elimination rate and input substrate concentration", lty = 2)
contour(ci, V, n, levels = 0, add = TRUE, col = "purple")
contour(ci, V, z, levels = 0, add = TRUE, col = "green", lty = 2)
abline(v = 0.42, col = "red", lty = 2, lwd = 3)
# First, set Vmax, F, K.
Vmax = 1
F = 1
K = 0.1
#
ci <- seq(0,3,length = 1000)
V <- seq(0,1,length = 1000)
m = outer(ci, V, function(ci, V) F*(ci - ci*exp((V - Vmax)/(F*K))) - V)
n = outer(ci, V, function(ci, V) F*ci - V)
z = outer(ci, V, function(ci, V) Vmax*ci/(ci + K) - V)
contour(ci, V, m, levels = 0, col = "blue", , xlab='ci (mmol/l)', ylab='V (mmol/min)', main = "Relationship between total elimination rate and input substrate concentration", lty = 2)
contour(ci, V, n, levels = 0, add = TRUE, col = "purple")
contour(ci, V, z, levels = 0, add = TRUE, col = "green", lty = 2)
abline(v = 0.42, col = "red", lty = 2, lwd = 1)
# First, set Vmax, F, K.
Vmax = 1
F = 1
K = 0.1
#
ci <- seq(0,3,length = 1000)
V <- seq(0,1,length = 1000)
m = outer(ci, V, function(ci, V) F*(ci - ci*exp((V - Vmax)/(F*K))) - V)
n = outer(ci, V, function(ci, V) F*ci - V)
z = outer(ci, V, function(ci, V) Vmax*ci/(ci + K) - V)
contour(ci, V, m, levels = 0, col = "blue", , xlab='ci (mmol/l)', ylab='V (mmol/min)', main = "Relationship between total elimination rate and input substrate concentration", lty = 2)
contour(ci, V, n, levels = 0, add = TRUE, col = "purple")
contour(ci, V, z, levels = 0, add = TRUE, col = "green", lty = 2)
abline(v = 0.42, col = "red", lty = 2, lwd = 2)
# First, set Vmax, F, K.
Vmax = 1
F = 1
K = 0.1
#
ci <- seq(0,3,length = 1000)
V <- seq(0,1,length = 1000)
m = outer(ci, V, function(ci, V) F*(ci - ci*exp((V - Vmax)/(F*K))) - V)
n = outer(ci, V, function(ci, V) F*ci - V)
z = outer(ci, V, function(ci, V) Vmax*ci/(ci + K) - V)
contour(ci, V, m, levels = 0, col = "blue", , xlab='ci (mmol/l)', ylab='V (mmol/min)', main = "Relationship between total elimination rate and input substrate concentration", lty = 2, lwd = 2)
contour(ci, V, n, levels = 0, add = TRUE, col = "purple", lwd = 2)
contour(ci, V, z, levels = 0, add = TRUE, col = "green", lty = 2, lwd = 2)
abline(v = 0.42, col = "red", lty = 2, lwd = 2)
# First, set Vmax, F, K.
Vmax = 1
F = 1
K = 0.1
#
ci <- seq(0,3,length = 1000)
V <- seq(0,1,length = 1000)
m = outer(ci, V, function(ci, V) F*(ci - ci*exp((V - Vmax)/(F*K))) - V)
n = outer(ci, V, function(ci, V) F*ci - V)
z = outer(ci, V, function(ci, V) Vmax*ci/(ci + K) - V)
contour(ci, V, m, levels = 0, col = "blue", , xlab='ci (mmol/l)', ylab='V (mmol/min)', main = "Relationship between ci and V", lty = 2, lwd = 2)
contour(ci, V, n, levels = 0, add = TRUE, col = "purple", lwd = 2)
contour(ci, V, z, levels = 0, add = TRUE, col = "green", lty = 2, lwd = 2)
abline(v = 0.42, col = "red", lty = 2, lwd = 2)
# First, set Vmax, F, K.
Vmax = 1
F = 1
K = 0.1
# Define the range of ci and V and mark the scale distance on the axis.
ci <- seq(0,3,length = 1000)
V <- seq(0,1,length = 1000)
# Separately define the formulas (m) for ordinary curves of V and ci, as well as the functional formulas (n and l) under the "homogeneous" and "flow-limited" regimes.
m = outer(ci, V, function(ci, V) F*ci - V)
n = outer(ci, V, function(ci, V) F*(ci - ci*exp((V - Vmax)/(F*K))) - V)
l = outer(ci, V, function(ci, V) Vmax*ci/(ci + K) - V)
# Draw an image of m, adjust the color and indicate the meaning of x,y, write the title, and set the thickness of the lines.
contour(ci, V, m, levels = 0, col = "purple", xlab='ci (mmol/l)', ylab='V (mmol/min)', main = "Relationship between ci and V", lwd = 2)
# Draw an image of n and l, adjust the color, use dashed lines and set the thickness of the lines.
contour(ci, V, n, levels = 0, add = TRUE, col = "blue", lty = 2, lwd = 2)
contour(ci, V, l, levels = 0, add = TRUE, col = "green", lty = 2, lwd = 2)
# Add a vertical dashed line to represent the changeover point c.
abline(v = 0.42, col = "red", lty = 2, lwd = 2)
# Generate a summary table
OA_data_new <- OA_data_1 %>% group_by(species, treatment) %>% summarise(mean_activity = mean(activity), sd_activity = sd(activity), N = length(species))
OA_data_new
# Use flextable to render the summary table in a tidy format
flextable(
OA_data_new,
col_keys = names(OA_data_new),
cwidth = 0.75,
cheight = 0.25,
defaults = list(),
theme_fun = theme_booktabs
)
options(warn = -1)
library(pacman)
p_load(bookdown, devtools, tidyverse, ggforce, GGally, flextable, 'plotrix', dplyr, latex2exp, png,
magick, metafor, MASS, emmeans, R.rsp)
devtools::install_github("daniel1noble/orchaRd", force = TRUE)
library(orchaRd)
data_com_new <- merge(ocean_data, data_com, all = T)
data_com_news1 <- data_com_new %>% filter(!is.na(ctrl.mean))
data_com_news2 <- data_com_news1 %>% filter(!is.na(oa.mean))
data_com_news2 = escalc(measure = "ROM", n1i = ctrl.n, m1i = ctrl.mean, sd1i = ctrl.sd, n2i = oa.n, m2i = oa.mean, sd2i = oa.sd, data = data_com_news2, append = TRUE)
data_com_news2 = escalc(measure = "ROM", n1i = ctrl.n, m1i = ctrl.mean, sd1i = ctrl.sd, n2i = oa.n, m2i = oa.mean, sd2i = oa.sd, data = data_com_news2, append = TRUE)
data_com_news2
data_com_news2 = escalc(measure = "ROM", n1i = ctrl.n, m1i = ctrl.mean, sd1i = ctrl.sd, n2i = oa.n, m2i = oa.mean, sd2i = oa.sd, data = data_com_news2, append = TRUE)
data_com_news2 = escalc(measure = "ROM", n1i = ctrl.n, m1i = ctrl.mean, sd1i = ctrl.sd, n2i = oa.n, m2i = oa.mean, sd2i = oa.sd, data = data_com_news2, append = TRUE)
data_com_news2
data_com_news2 = escalc(measure = "ROM", n1i = ctrl.n, m1i = ctrl.mean, sd1i = ctrl.sd, n2i = oa.n, m2i = oa.mean, sd2i = oa.sd, data = data_com_news2, append = TRUE)
data_com_news2 = escalc(measure = "ROM", n1i = ctrl.n, m1i = ctrl.mean, sd1i = ctrl.sd, n2i = oa.n, m2i = oa.mean, sd2i = oa.sd, data = data_com_news2, append = TRUE)
data_com_news2 = escalc(measure = "ROM", n1i = ctrl.n, m1i = ctrl.mean, sd1i = ctrl.sd, n2i = oa.n, m2i = oa.mean, sd2i = oa.sd, data = data_com_news2, append = TRUE)
